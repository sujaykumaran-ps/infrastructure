AWSTemplateFormatVersion: "2010-09-09"
Description: CSYE 6225 IaC
Parameters:
  VpcCidrBlock:
    Description: "CIDR Block for VPC"
    Type: String
    Default: "10.0.0.0/16"
  VpcSubnetCidrBlocks: 
    Description: "List of three Subnet CIDR blocks"
    Type: CommaDelimitedList
    Default: "10.0.10.0/24, 10.0.11.0/24, 10.0.12.0/24, 10.0.13.0/24, 10.0.14.0/24, 10.0.15.0/24"
  VpcSubnetAvailabilityZones: 
    Description: "List of three Subnet Availability Zones"
    Type: CommaDelimitedList
    Default: "us-east-1a, us-east-1b, us-east-1c"
  PublicRouteDestinationCidrBlock:
    Description: "CIDR Block for Public Route"
    Type: String
    Default: "0.0.0.0/0"
  PrivateRouteDestinationCidrBlock:
    Description: "CIDR Block for Public Route"
    Type: String
    Default: "0.0.0.0/0"
  PublicSubnetNames:
    Description: "Name Tags for Subnets"
    Type: CommaDelimitedList
    Default: "PublicSubnetA, PublicSubnetB, PublicSubnetC"
  PrivateSubnetNames:
    Description: "Name Tags for Subnets"
    Type: CommaDelimitedList
    Default: "PrivateSubnetA, PrivateSubnetB, PrivateSubnetC"
  PublicRouteTableName:
    Description: "Name Tag for Public RT"
    Type: String
    Default: "PublicRT"
  PrivateRouteTableName:
    Description: "Name Tag for Private RT"
    Type: String
    Default: "PrivateRT"
  InternetGatewayName:
    Description: "Name Tag for Internet Gateway"
    Type: String
    Default: "InternetGateway"
  NATGatewayName:
    Description: "Name Tag for NAT Gateway"
    Type: String
    Default: "NATGateway"
  AppSGName:
    Description: "Name Tag for Application Security Group"
    Type: String
    Default: "application"
  DBSecurityGroupName:
    Description: "Name Tag for DB Security Group"
    Type: String
    Default: "database"
  AmiID:
    Description: "AMI ID for Instance"
    Type: String
  EC2InstanceName:
    Description: "Instance Name"
    Type: String
    Default: "Webapp"
  S3BucketName:
    Description: "S3 Bucket Name"
    Type: String
  Ipv4Cidr:
    Description: "AMI ID for Instance"
    Type: String
    Default: "0.0.0.0/0"
  Ipv6Cidr:
    Description: "AMI ID for Instance"
    Type: String
    Default: "::/0"
Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: 'default'
      Tags: 
      - Key: Name
        Value: !Ref AWS::StackName
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Ref InternetGatewayName
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref myVPC
  NATGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: ElasticIPAddress
    Properties:
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
      - Key: Name
        Value: !Ref NATGatewayName
  ElasticIPAddress:
    Type: AWS::EC2::EIP
    DependsOn: myVPC
    Properties:
      Domain: vpc
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Select [0, !Ref VpcSubnetCidrBlocks]
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: true
      Tags: 
      - Key: Name
        Value: !Select [0, !Ref PublicSubnetNames]
      - Key: VPC Name
        Value: !Ref AWS::StackName
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Select [1, !Ref VpcSubnetCidrBlocks]
      AvailabilityZone: !Select 
        - 1
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: true
      Tags: 
      - Key: Name
        Value: !Select [1, !Ref PublicSubnetNames]
      - Key: VPC Name
        Value: !Ref AWS::StackName
  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Select [2, !Ref VpcSubnetCidrBlocks]
      AvailabilityZone: !Select 
        - 2
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: true
      Tags: 
      - Key: Name
        Value: !Select [2, !Ref PublicSubnetNames]
      - Key: VPC Name
        Value: !Ref AWS::StackName
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Select [3, !Ref VpcSubnetCidrBlocks]
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: false
      Tags: 
      - Key: Name
        Value: !Select [0, !Ref PrivateSubnetNames]
      - Key: VPC Name
        Value: !Ref AWS::StackName
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Select [4, !Ref VpcSubnetCidrBlocks]
      AvailabilityZone: !Select 
        - 1
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: false
      Tags: 
      - Key: Name
        Value: !Select [1, !Ref PrivateSubnetNames]
      - Key: VPC Name
        Value: !Ref AWS::StackName
  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Select [5, !Ref VpcSubnetCidrBlocks]
      AvailabilityZone: !Select 
        - 2
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: false
      Tags: 
      - Key: Name
        Value: !Select [2, !Ref PrivateSubnetNames]
      - Key: VPC Name
        Value: !Ref AWS::StackName
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: myVPC
      Tags:
      - Key: Name
        Value: !Ref PublicRouteTableName
      - Key: VPC Name
        Value: !Ref AWS::StackName
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: myVPC
      Tags:
      - Key: Name
        Value: !Ref PrivateRouteTableName
      - Key: VPC Name
        Value: !Ref AWS::StackName
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: !Ref PublicRouteDestinationCidrBlock
      GatewayId:
        Ref: InternetGateway
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      NatGatewayId:
        Ref: NATGateway
      DestinationCidrBlock: !Ref PrivateRouteDestinationCidrBlock
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnetA
      RouteTableId:
        Ref: PublicRouteTable
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnetB
      RouteTableId:
        Ref: PublicRouteTable
  PublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnetC
      RouteTableId:
        Ref: PublicRouteTable
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnetA
      RouteTableId:
        Ref: PrivateRouteTable
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnetB
      RouteTableId:
        Ref: PrivateRouteTable
  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnetC
      RouteTableId:
        Ref: PrivateRouteTable
  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: application
        GroupName: application
        VpcId:
          Ref: myVPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp:
            Ref: Ipv4Cidr
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIpv6:
            Ref: Ipv6Cidr
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp:
            Ref: Ipv4Cidr
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIpv6:
            Ref: Ipv6Cidr
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp:
            Ref: Ipv4Cidr
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIpv6:
            Ref: Ipv6Cidr
        - IpProtocol: tcp
          Description: SSH
          FromPort: 22
          ToPort: 22
          CidrIp: 
            Ref: Ipv4Cidr
        - IpProtocol: tcp
          Description: SSH
          FromPort: 22
          ToPort: 22
          CidrIpv6:
            Ref: Ipv6Cidr
        Tags:
        - Key: Name
          Value: !Ref AppSGName
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: database
        GroupName: database
        VpcId:
          Ref: myVPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !GetAtt ApplicationSecurityGroup.GroupId 
        Tags:
        - Key: Name
          Value: !Ref DBSecurityGroupName
  MyEC2Instance: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: 
        Ref: "AmiID"
      InstanceType: "t2.micro"
      KeyName: "Webapp"
      BlockDeviceMappings: 
      - DeviceName: "/dev/sdm"
        Ebs: 
          VolumeType: "gp2"
          DeleteOnTermination: "false"
          VolumeSize: "20"
      NetworkInterfaces: 
      - AssociatePublicIpAddress: "true"
        DeviceIndex: "0"
        GroupSet: 
          - Ref: ApplicationSecurityGroup
        SubnetId: 
          Ref: PublicSubnetA
      Tags:
        - Key: Name
          Value: !Ref EC2InstanceName
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Delete
    Properties:
      BucketEncryption: 
        ServerSideEncryptionConfiguration: 
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      BucketName: !Ref S3BucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: Move to Standard IA
            Prefix: profile
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
      Tags:
        - Key: Name
          Value: !Ref S3BucketName
Outputs:
  VpcId:
    Description: The VPC ID
    Value: !Ref myVPC
  PublicSubnetA:
    Description: The PublicSubnetA ID
    Value: !Ref PublicSubnetA
  PublicSubnetB:
    Description: The PublicSubnetB ID
    Value: !Ref PublicSubnetB
  PublicSubnetC:
    Description: The PublicSubnetC ID
    Value: !Ref PublicSubnetC
  PublicRouteTable:
    Description: The Public Route Table ID
    Value: !Ref PublicRouteTable
  InternetGateway:
    Description: Internet Gateway ID
    Value: !Ref InternetGateway