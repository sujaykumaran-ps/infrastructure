AWSTemplateFormatVersion: "2010-09-09"
Description: CSYE 6225 IaC
Parameters:
  VpcCidrBlock:
    Description: "CIDR Block for VPC"
    Type: String
    Default: "10.0.0.0/16"
  VpcSubnetCidrBlocks: 
    Description: "List of three Subnet CIDR blocks"
    Type: CommaDelimitedList
    Default: "10.0.10.0/24, 10.0.11.0/24, 10.0.12.0/24, 10.0.13.0/24, 10.0.14.0/24, 10.0.15.0/24"
  VpcSubnetAvailabilityZones: 
    Description: "List of three Subnet Availability Zones"
    Type: CommaDelimitedList
    Default: "us-east-1a, us-east-1b, us-east-1c"
  PublicRouteDestinationCidrBlock:
    Description: "CIDR Block for Public Route"
    Type: String
    Default: "0.0.0.0/0"
  PublicSubnetNames:
    Description: "Name Tags for Subnets"
    Type: CommaDelimitedList
    Default: "PublicSubnetA, PublicSubnetB, PublicSubnetC"
  PrivateSubnetNames:
    Description: "Name Tags for Subnets"
    Type: CommaDelimitedList
    Default: "PrivateSubnetA, PrivateSubnetB, PrivateSubnetC"
  PublicRouteTableName:
    Description: "Name Tag for Public RT"
    Type: String
    Default: "PublicRT"
  PrivateRouteTableName:
    Description: "Name Tag for Private RT"
    Type: String
    Default: "PrivateRT"
  InternetGatewayName:
    Description: "Name Tag for Internet Gateway"
    Type: String
    Default: "InternetGateway"
  AppSGName:
    Description: "Name Tag for Application Security Group"
    Type: String
    Default: "application"
  DBSecurityGroupName:
    Description: "Name Tag for DB Security Group"
    Type: String
    Default: "database"
  AmiID:
    Description: "AMI ID for Instance"
    Type: String
  AccessKey:
    Description: "Access Key for Instance"
    Type: String
  SecretKey:
    Description: "Secret Key for Instance"
    Type: String
  KeyPairName:
    Description: "Key Pair Name"
    Type: String
    Default: "Webapp"
  EC2InstanceName:
    Description: "Instance Name"
    Type: String
    Default: "Webapp"
  Ipv4Cidr:
    Description: "AMI ID for Instance"
    Type: String
    Default: "0.0.0.0/0"
  Ipv6Cidr:
    Description: "AMI ID for Instance"
    Type: String
    Default: "::/0"
  ProfileName:
    Type: String
    Description: Dev or Demo Env
    Default: dev
  InstanceType:
    Description: EC2 instance Type
    Type: String
    Default: t2.micro
  HealthPath:
    Description: Healthz Path
    Type: String
    Default: /healthz
  HostedZone:
    Description: Hosted Zone URL
    Type: String
    Default: dev.sujays.me.
Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: 'default'
      Tags: 
      - Key: Name
        Value: !Ref AWS::StackName
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Ref InternetGatewayName
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref myVPC
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Select [0, !Ref VpcSubnetCidrBlocks]
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: true
      Tags: 
      - Key: Name
        Value: !Select [0, !Ref PublicSubnetNames]
      - Key: VPC Name
        Value: !Ref AWS::StackName
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Select [1, !Ref VpcSubnetCidrBlocks]
      AvailabilityZone: !Select 
        - 1
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: true
      Tags: 
      - Key: Name
        Value: !Select [1, !Ref PublicSubnetNames]
      - Key: VPC Name
        Value: !Ref AWS::StackName
  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Select [2, !Ref VpcSubnetCidrBlocks]
      AvailabilityZone: !Select 
        - 2
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: true
      Tags: 
      - Key: Name
        Value: !Select [2, !Ref PublicSubnetNames]
      - Key: VPC Name
        Value: !Ref AWS::StackName
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Select [3, !Ref VpcSubnetCidrBlocks]
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: false
      Tags: 
      - Key: Name
        Value: !Select [0, !Ref PrivateSubnetNames]
      - Key: VPC Name
        Value: !Ref AWS::StackName
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Select [4, !Ref VpcSubnetCidrBlocks]
      AvailabilityZone: !Select 
        - 1
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: false
      Tags: 
      - Key: Name
        Value: !Select [1, !Ref PrivateSubnetNames]
      - Key: VPC Name
        Value: !Ref AWS::StackName
  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Select [5, !Ref VpcSubnetCidrBlocks]
      AvailabilityZone: !Select 
        - 2
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: false
      Tags: 
      - Key: Name
        Value: !Select [2, !Ref PrivateSubnetNames]
      - Key: VPC Name
        Value: !Ref AWS::StackName
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: myVPC
      Tags:
      - Key: Name
        Value: !Ref PublicRouteTableName
      - Key: VPC Name
        Value: !Ref AWS::StackName
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: myVPC
      Tags:
      - Key: Name
        Value: !Ref PrivateRouteTableName
      - Key: VPC Name
        Value: !Ref AWS::StackName
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: !Ref PublicRouteDestinationCidrBlock
      GatewayId:
        Ref: InternetGateway
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnetA
      RouteTableId:
        Ref: PublicRouteTable
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnetB
      RouteTableId:
        Ref: PublicRouteTable
  PublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnetC
      RouteTableId:
        Ref: PublicRouteTable
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnetA
      RouteTableId:
        Ref: PrivateRouteTable
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnetB
      RouteTableId:
        Ref: PrivateRouteTable
  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnetC
      RouteTableId:
        Ref: PrivateRouteTable
  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: application
        GroupName: application
        VpcId:
          Ref: myVPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
        - IpProtocol: tcp
          Description: SSH
          FromPort: 22
          ToPort: 22
          CidrIp: 
            Ref: Ipv4Cidr
        - IpProtocol: tcp
          Description: SSH
          FromPort: 22
          ToPort: 22
          CidrIpv6:
            Ref: Ipv6Cidr
        Tags:
        - Key: Name
          Value: !Ref AppSGName
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: database
        GroupName: database
        VpcId:
          Ref: myVPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !GetAtt ApplicationSecurityGroup.GroupId 
        Tags:
        - Key: Name
          Value: !Ref DBSecurityGroupName
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: load balancer
        GroupName: load balancer
        VpcId:
          Ref: myVPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp:
            Ref: Ipv4Cidr
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIpv6:
            Ref: Ipv6Cidr
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp:
            Ref: Ipv4Cidr
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIpv6:
            Ref: Ipv6Cidr
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Delete
    Properties:
      BucketEncryption: 
        ServerSideEncryptionConfiguration: 
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      BucketName: !Join
        - "."
        - - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
          - Ref: "ProfileName"
          - "sujays.me"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: Move to Standard IA
            Prefix: profile
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup' 
    Properties: 
      DBSubnetGroupDescription: Private Subnet Group for MyQql Database
      DBSubnetGroupName: RDS Subnet Group
      SubnetIds: 
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
        - !Ref PrivateSubnetC
  RDSDBParameterGroup:
    Type: 'AWS::RDS::DBParameterGroup'
    Properties:
      Description: PG-MySQL8
      Family: mysql8.0
  MyDB:
    Type: 'AWS::RDS::DBInstance'
    DeletionPolicy: Delete
    Properties:
      MultiAZ: false
      DBInstanceIdentifier: csye6225
      DBName: csye6225
      Port: 3306
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      Engine: MySQL
      EngineVersion: 8.0.27
      MasterUsername: csye6225
      MasterUserPassword: Csye6225DB
      PubliclyAccessible: false
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      DBParameterGroupName:
        Ref: RDSDBParameterGroup
  WebAppS3Policy:
    Type: 'AWS::IAM::Policy'
    Properties:
        PolicyName: WebAppS3
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
              - 's3:ListAllMyBuckets'
              - 's3:GetObject'
              - 's3:PutObject'
              - 's3:DeleteObject'
            Resource: 
              -  !Sub arn:aws:s3:::${S3Bucket}
              -  !Sub arn:aws:s3:::${S3Bucket}/*
        Roles: 
          - !Ref IAMRole
  IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: EC2-CSYE6225
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
  IAMInstanceProfile: 
    Type: 'AWS::IAM::InstanceProfile'
    Properties: 
      Path: /
      Roles: 
        - Ref: IAMRole
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref AmiID
      IamInstanceProfile: !Ref IAMInstanceProfile
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      BlockDeviceMappings: 
      - DeviceName: "/dev/sdm"
        Ebs: 
          VolumeType: "gp2"
          DeleteOnTermination: "false"
          VolumeSize: "20"
      AssociatePublicIpAddress: "true"
      SecurityGroups:
      - !Ref ApplicationSecurityGroup
      UserData: 
        Fn::Base64: 
            !Sub |
            #cloud-boothook
            #!/bin/bash
            echo "{\"db_host\":\"${MyDB.Endpoint.Address}\",\"db_user\":\"csye6225\",\"db_password\":\"Csye6225DB\",\"default_database\":\"csye6225\",\"db_port\":3306,\"s3_bucket\":\"${S3Bucket}\",\"AWS_ACCESS_KEY_ID\":\"${AccessKey}\",\"AWS_ACCESS_KEY_SECRET\":\"${SecretKey}\"}" > /home/ec2-user/webservice/config.json
      LaunchConfigurationName: !Join
        - "."
        - - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
          - "asg_launch_config"
  AutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: '3'
      MaxSize: '5'
      DesiredCapacity: '3'
      HealthCheckGracePeriod: 90
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref LaunchConfig
      VPCZoneIdentifier:
      - !Ref PublicSubnetA
      - !Ref PublicSubnetB
      - !Ref PublicSubnetC
      TargetGroupARNs:
      - !Ref LoadBalancerTargetGroup
      Cooldown: 60
      Tags:
        - Key: Application
          Value: WebApp
          PropagateAtLaunch: "true"
        - Key: Name
          Value: !Sub ${AWS::StackName}-asg
          PropagateAtLaunch: "true"
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: !Sub ${AWS::StackName}-load-balancer
      Scheme: internet-facing
      Type: application
      Subnets:
      - !Ref PublicSubnetA
      - !Ref PublicSubnetB
      - !Ref PublicSubnetC
      SecurityGroups: 
      - !Ref LoadBalancerSecurityGroup
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '5'
      AlarmDescription: Alarm if CPU utilization more than 5%
      Period: '120'
      AlarmActions:
      - !Ref ScaleOutPolicy
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref AutoscalingGroup
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '3'
      AlarmDescription: Alarm if CPU utilization is less than 3%
      Period: '120'
      AlarmActions:
      - !Ref ScaleInPolicy
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref AutoscalingGroup
      ComparisonOperator: LessThanThreshold
      MetricName: CPUUtilization
  ScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoscalingGroup
      Cooldown: 60
      ScalingAdjustment: 1
  ScaleInPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoscalingGroup
      Cooldown: 60
      ScalingAdjustment: -1
  LoadBalancerTargetGroup:
    DependsOn: LoadBalancer
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: !Ref HealthPath
      IpAddressType: ipv4
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      HealthCheckPort: 3000
      HealthCheckProtocol: HTTP
      Name: !Sub ${AWS::StackName}-lb-tg
      Port: 3000
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
      TargetType: instance
      VpcId: !Ref myVPC
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref LoadBalancerTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
  DNSRecord:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Ref HostedZone
      Comment: Zone apex alias targeted to LoadBalancer.
      RecordSets:
      - Name: !Ref HostedZone
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt 'LoadBalancer.CanonicalHostedZoneID'
          DNSName: !GetAtt 'LoadBalancer.DNSName'
  CodeDeployEC2S3:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: CodeDeploy-EC2-S3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Action:
            - 's3:GetObject'
            - 's3:ListObject'
          Resource:
              - arn:aws:s3:::codedeploy.sujays.me
              - arn:aws:s3:::codedeploy.sujays.me/*
      Roles:
        - !Ref IAMRole
  GHUploadToS3:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: GH-Upload-To-S3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Action:
            - 's3:GetObject'
            - 's3:ListObject'
            - 's3:PutObject'
          Resource:
              - arn:aws:s3:::codedeploy.sujays.me
              - arn:aws:s3:::codedeploy.sujays.me/*
      Users: 
        - ghactions-app
  GHCodeDeploy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: GHCodeDeploy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'codedeploy:RegisterApplicationRevision'
              - 'codedeploy:GetApplicationRevision'
            Resource: 
              - !Join ["",["arn:aws:codedeploy:us-east-1:",!Ref "AWS::AccountId", ":application:",!Ref CodeDeployApplication,],]
          - Effect: Allow
            Action:
              - 'codedeploy:CreateDeployment'
              - 'codedeploy:GetDeployment'
            Resource:
              - '*'
          - Effect: Allow
            Action:
              - 'codedeploy:GetDeploymentConfig'
            Resource:
              - !Join ["",["arn:aws:codedeploy:us-east-1:",!Ref "AWS::AccountId", ":deploymentconfig:CodeDeployDefault.OneAtATime",],]
              - !Join ["",["arn:aws:codedeploy:us-east-1:",!Ref "AWS::AccountId", ":deploymentconfig:CodeDeployDefault.HalfAtATime",],]
              - !Join ["",["arn:aws:codedeploy:us-east-1:",!Ref "AWS::AccountId", ":deploymentconfig:CodeDeployDefault.AllAtOnce",],]
      Users:
        - ghactions-app
  GHEC2AMI:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: gh-ec2-ami
      PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
              - ec2:AttachVolume
              - ec2:AuthorizeSecurityGroupIngress
              - ec2:CopyImage
              - ec2:CreateImage
              - ec2:CreateKeypair
              - ec2:CreateSecurityGroup
              - ec2:CreateSnapshot
              - ec2:CreateTags
              - ec2:CreateVolume
              - ec2:DeleteKeyPair
              - ec2:DeleteSecurityGroup
              - ec2:DeleteSnapshot
              - ec2:DeleteVolume
              - ec2:DeregisterImage
              - ec2:DescribeImageAttribute
              - ec2:DescribeImages
              - ec2:DescribeInstances
              - ec2:DescribeInstanceStatus
              - ec2:DescribeRegions
              - ec2:DescribeSecurityGroups
              - ec2:DescribeSnapshots
              - ec2:DescribeSubnets
              - ec2:DescribeTags
              - ec2:DescribeVolumes
              - ec2:DetachVolume
              - ec2:GetPasswordData
              - ec2:ModifyImageAttribute
              - ec2:ModifyInstanceAttribute
              - ec2:ModifySnapshotAttribute
              - ec2:RegisterImage
              - ec2:RunInstances
              - ec2:StopInstances
              - ec2:TerminateInstances
            Resource:
              - '*'      
      Users:
          - ghactions-app
  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodeDeployServiceRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action: 
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
      Path: "/"
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ComputePlatform: Server
      ApplicationName: csye6225webapp
  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    DependsOn: CodeDeployApplication 
    Properties:
      DeploymentGroupName: csye6225-webapp-deployment
      ApplicationName: !Ref CodeDeployApplication
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
      DeploymentStyle:
        DeploymentType: IN_PLACE
        DeploymentOption: WITHOUT_TRAFFIC_CONTROL
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      AutoRollbackConfiguration:
        Enabled: 'true'
        Events: 
          - DEPLOYMENT_FAILURE
      Ec2TagFilters:
        - Key: Name
          Value: !Sub ${AWS::StackName}-asg
          Type: KEY_AND_VALUE
Outputs:
  VpcId:
    Description: The VPC ID
    Value: !Ref myVPC
  PublicSubnetA:
    Description: The PublicSubnetA ID
    Value: !Ref PublicSubnetA
  PublicSubnetB:
    Description: The PublicSubnetB ID
    Value: !Ref PublicSubnetB
  PublicSubnetC:
    Description: The PublicSubnetC ID
    Value: !Ref PublicSubnetC
  PublicRouteTable:
    Description: The Public Route Table ID
    Value: !Ref PublicRouteTable
  InternetGateway:
    Description: Internet Gateway ID
    Value: !Ref InternetGateway